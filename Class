import decimal  # не забудь добавить в начало файла

class MexcTrader:
    def __init__(self):
        self.crypto = CryptoManager()
        self.running = False
        self.paused = False
        self.thread = None
        self.orders = []
        self.pnl = {
            "total_profit": 0.0,
            "total_trades": 0,
            "active_orders": 0,
            "history": []
        }
        self.current_user = None
        self._init_files()

    def _init_files(self):
        Path(CONFIG['LOGS_DIR']).mkdir(exist_ok=True)
        for file in [CONFIG['SETTINGS_FILE'], CONFIG['USERS_FILE']]:
            if not os.path.exists(file):
                with open(file, 'w') as f:
                    json.dump({}, f)
            else:
                try:
                    with open(file, 'r') as f:
                        json.load(f)
                except json.JSONDecodeError:
                    with open(file, 'w') as f:
                        json.dump({}, f)
            os.chmod(file, 0o600)

    def get_price_precision(self):
        try:
            symbol = self.settings['trading_pair']
            url = "https://api.mexc.com/api/v3/exchangeInfo"
            response = requests.get(url)
            data = response.json()
            for s in data['symbols']:
                if s['symbol'] == symbol:
                    for f in s['filters']:
                        if f['filterType'] == 'PRICE_FILTER':
                            tick_size = float(f['tickSize'])
                            return abs(decimal.Decimal(str(tick_size)).as_tuple().exponent)
        except Exception as e:
            self.log(f"Ошибка получения точности цены: {str(e)}")
        return 2

    def get_quantity_precision(self):
        try:
            symbol = self.settings['trading_pair']
            url = "https://api.mexc.com/api/v3/exchangeInfo"
            response = requests.get(url)
            data = response.json()
            for s in data['symbols']:
                if s['symbol'] == symbol:
                    for f in s['filters']:
                        if f['filterType'] == 'LOT_SIZE':
                            step_size = float(f['stepSize'])
                            return abs(decimal.Decimal(str(step_size)).as_tuple().exponent)
        except Exception as e:
            self.log(f"Ошибка получения точности количества: {str(e)}")
        return 4

    def get_price(self):
        try:
            symbol = self.settings['trading_pair']
            if '_' not in symbol:
                symbol = symbol.replace('USDT', '_USDT')
            url = "https://www.mexc.com/open/api/v2/market/ticker"
            response = requests.get(url, params={'symbol': symbol})
            data = response.json()
            return float(data['data'][0]['last'])
        except Exception as e:
            self.log(f"Ошибка получения цены: {str(e)}")
            return None

    def calculate_quantity(self):
        price = self.get_price()
        if not price:
            return 0.0
        precision = self.get_quantity_precision()
        quantity = self.settings['order_size'] / price
        return round(quantity, precision)

    def place_order(self, side, price=None):
        if self.settings['test_mode']:
            order_id = f"TEST_{side}_{int(time.time())}"
            self.log(f"[ТЕСТ] {side} ордер по {price or 'рынку'}")
            return {'orderId': order_id}

        params = {
            'symbol': self.settings['trading_pair'],
            'side': side.upper(),
            'type': 'LIMIT' if price else 'MARKET',
            'quantity': self.calculate_quantity(),
            'timestamp': int(time.time() * 1000)
        }

        if price:
            params['price'] = price
            params['timeInForce'] = 'GTC'

        params['signature'] = hmac.new(
            self.user['api_secret'].encode(),
            urllib.parse.urlencode(params).encode(),
            hashlib.sha256
        ).hexdigest()

        try:
            response = requests.post(
                f"{CONFIG['API_URL']}/order",
                headers={"X-MEXC-APIKEY": self.user['api_key']},
                params=params
            )
            resp = response.json()
            if 'orderId' in resp:
                return {'orderId': resp['orderId']}
            else:
                self.log(f"Ошибка при размещении ордера: {resp}")
                return None
        except Exception as e:
            self.log(f"API Error: {str(e)}")
            return None

    def buy_and_set_sell(self, price):
        buy_order = self.place_order('BUY')
        if not buy_order:
            return

        precision = self.get_price_precision()
        sell_price = round(price * (1 + self.settings['profit_percent']/100), precision)
        sell_order = self.place_order('SELL', sell_price)

        if sell_order:
            self.orders.append({
                'buy_price': price,
                'sell_price': sell_price,
                'sell_order_id': sell_order['orderId'],
                'timestamp': datetime.now().timestamp()
            })
            self.pnl['active_orders'] = len(self.orders)
            self.log(f"DCA: Куплено по {price:.{precision}f} → Продажа по {sell_price:.{precision}f}")
